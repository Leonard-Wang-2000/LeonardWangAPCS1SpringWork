//APCS1 Leonard Wang 1stperiod
package textExcel;
public class FormulaCell extends RealCell{
	private String value = "";
	private Cell[][] wholeSpreadsheet;
	public FormulaCell(String input, Cell[][] array){
		value = input;
		wholeSpreadsheet = array;
		//stores string in parent class
	}
	public double getDoubleValue(){
		String noParenthesis = value.substring(2, value.length() - 2);
		String[] changeValue = noParenthesis.split(" ");
		if(changeValue.length == 1){
			return Double.parseDouble(changeValue[0]);
		} else if(changeValue[0].toUpperCase().equals("AVG")){
			//get the begginning cell and ending cell
			int counter = 0;
			String beginning = changeValue[1].toUpperCase().substring(0, changeValue[1].indexOf('-'));
			String ending = changeValue[1].toUpperCase().substring(changeValue[1].indexOf('-') + 1);
			String placeHolder = beginning;
			while(!(beginning.equals(ending))){
				SpreadsheetLocation loc = new SpreadsheetLocation(placeHolder);
				//change the column when its the same row
				 if(placeHolder.substring(1).equals(ending.substring(1))){
					 //changes the letter by one if the rows are the same
					 placeHolder = ((char)(placeHolder.charAt(0) + 1)) + beginning.substring(1);
					if(wholeSpreadsheet[loc.getRow()][loc.getCol()] instanceof RealCell){
						//makes sure its a realcell there before adding one to counter
						counter++;
					}
				}else{
					//Move to next row if the row isnt equal
					placeHolder = placeHolder.charAt(0) + "" + (Integer.parseInt(placeHolder.substring(1)) + 1);
					if(wholeSpreadsheet[loc.getRow()][loc.getCol()] instanceof RealCell){
						counter++;
					}
				}
			}
			return (sum(cell, cell, ending)) / counter;
		} else if(changeValue[0].toUpperCase().equals("SUM")){
			return (sum(cell,cell,ending))
		}
		double finalValue = Double.parseDouble(changeValue[0]);
		//( 5.4 * 3.5 / -1.4 + 27.4 - 11.182 ) 
		//increments by 2 and tests for signs to correctly 
		for(int i = 2; i < changeValue.length; i+=2){
			if(changeValue[i-1].equals("+")){
				finalValue += Double.parseDouble(changeValue[i]);
			} else if(changeValue[i-1].equals("*")){
				finalValue *= Double.parseDouble(changeValue[i]);
			} else if(changeValue[i-1].equals("/")){
				finalValue /= Double.parseDouble(changeValue[i]);
			} else{
				finalValue -= Double.parseDouble(changeValue[i]);
			}
		}
		setRealCell(finalValue + "");
		return finalValue;
	}
	public String fullCellText(){
		return value;
	}
	public String abbreviatedCellText() {
		String value = getDoubleValue() + "";
		if (value.length() > 10) {
			return value.substring(0, 10);
		} else {
			for (int i = value.length(); i < 10; i++) {
				value += " ";
			}
			return value;
		}
	}
public double sum(String cell, String newCell, String end){	
		
		SpreadsheetLocation loc = new SpreadsheetLocation(newCell);
		
		//when they are the same, finishes and goes back through
		if(newCell.equals(end)){
			if(wholeSpreadsheet[loc.getRow()][loc.getCol()] instanceof RealCell){
				return ((RealCell)wholeSpreadsheet[loc.getRow()][loc.getCol()]).getDoubleValue();
			}else{
				return 0.0;
			}
		}
		//if the columns aren't the same, but the rows are, move horizontally
		if(Character.toUpperCase(cell.charAt(0)) != Character.toUpperCase(end.charAt(0)) 
				&& Integer.parseInt(cell.substring(1)) == Integer.parseInt(end.substring(1))){
			
			newCell = ((char)(newCell.charAt(0) + 1)) + cell.substring(1);
			
			//if the columns are the same,but the rows are not, move vertically
		}else if( Character.toUpperCase(cell.charAt(0)) == Character.toUpperCase(end.charAt(0))
				&& Integer.parseInt(cell.substring(1)) <= Integer.parseInt(end.substring(1))){
			
			newCell = Character.toString(cell.charAt(0)) + (Integer.parseInt(newCell.substring(1)) + 1);
			
			//if the columns and the rows aren't the same, move through all of the cells
		}else{
			
			//when row is less than the ending row, keep going down
			if(Integer.parseInt(newCell.substring(1)) < Integer.parseInt(end.substring(1))){
				
				newCell = Character.toString(newCell.charAt(0)) + (Integer.parseInt(newCell.substring(1)) + 1);

				//if the rows are the same, reset and move to next column
			}else if(Integer.parseInt(newCell.substring(1)) == Integer.parseInt(end.substring(1))){
				
				newCell = ((char)(newCell.charAt(0) + 1)) + "" + cell.substring(1);
				
			}
		}

		//gets the value of the cell and keeps it and returns it
		double first;
		if(wholeSpreadsheet[loc.getRow()][loc.getCol()] instanceof RealCell){
			 first = ((RealCell)wholeSpreadsheet[loc.getRow()][loc.getCol()]).getDoubleValue();
			return (first + sum(cell, newCell, end));
		}else{
			return sum(cell, newCell, end);
		}
	}
}
